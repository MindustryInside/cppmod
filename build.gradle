import org.gradle.internal.jvm.*

apply plugin: 'java'

sourceSets.main.java.srcDirs = ['src/java']

def jvm = Jvm.current()
def JAVA_HOME = jvm.javaHome
def TEMP = File.createTempDir()
def OS = System.getProperty('os.name')

ext {
    natives = [:]
    versions = [:]

    natives.bin = file("$rootDir/natives/bin")
    natives.include = file("$rootDir/natives/include")

    natives.src = file("$rootDir/src/cpp")

    natives.javaSources = [
        'nativeio.jni.Natives'
    ]

    natives.javaSources = natives.javaSources.collect { String clazz ->
        clazz = clazz.replace '.', '\\'
        clazz += '.java'

        return "$rootDir\\src\\java\\$clazz"
    }

    versions.mindustry = 'v125.1'
}

repositories {
    mavenCentral()
    maven { url "https://jitpack.io" }
}

dependencies {
    implementation "com.github.Anuken.Mindustry:core:$versions.mindustry"
    implementation "com.github.Anuken.Arc:arc-core:$versions.mindustry"
}

task run(type: JavaExec) {
    main = 'nativeio.Main'
    classpath = sourceSets.main.runtimeClasspath

    jvmArgs "-Djava.library.path=$natives.bin"
}

task nativeHeaders() {
    doLast {
        exec {
            executable jvm.javacExecutable
                args '-d', TEMP
                args '-h', natives.include
                args natives.javaSources
        }
    }
}

task buildNatives() {
    def platformInclude = OS.contains('Windows') ? 'win32'
            : OS.contains('Linux') ? 'linux' : 'darwin'

    def platformShared = OS.contains('Windows') ? 'nativeio.dll'
            : OS.contains('Linux') ? 'libnativeio.so' : 'libnativeio.dylib'

    doLast {
        natives.bin.mkdirs()

        exec {
            executable 'g++'
                args '-I', "$JAVA_HOME/include"
                args '-I', "$JAVA_HOME/include/$platformInclude"
                args '-I', natives.src
                args '-o', "$natives.bin/$platformShared"
                args '-shared'
                args '-std=c++17'
                args "$natives.src/*.cpp"
        }
    }
}

task natives() {
    dependsOn nativeHeaders, buildNatives
}
